Program 6: Design, Develop and Implement a menu driven Program in C Language  for the following operations on QUEUE of Integers (Array Implementation of Queue with maximum size MAX) 
a. Insert an Element on to QUEUE 
b. Delete an Element from QUEUE 
c. Demonstrate Overflow and Underflow situations on QUEUE 
d. Display the status of QUEUE 
e. Exit  
Support the program with appropriate functions for each of the above operations

#include<stdio.h> 
#include<stdlib.h> 
#define MAX 5 
 
int queue_arr[MAX]; 
int rear=-1; 
int front=-1; 
 
void insert(int item); 
int del(); 
int peek(); 
void display(); 
int isFull(); 
int isEmpty(); 
 
int main() 
{ 
        int choice,item; 
        while(1) 
        { 
                printf("\n1.Insert\n"); 
                printf("2.Delete\n"); 
                printf("3.Display element at the front\n"); 
                printf("4.Display all elements of the queue\n"); 
                printf("5.Quit\n"); 
                printf("\n Enter your choice : "); 
                scanf("%d",&choice); 
               /*Switch Case*/ 
               switch(choice) 
                { 
                case 1: 
                        printf("\n Input the element for adding in queue : "); 
                        scanf("%d",&item); 
                        insert(item); 
                        break; 
                case 2: 
                        item=del(); 
                        printf("\n Deleted element is  %d\n",item); 
                        break; 
                case 3: 
                        printf("\n Element at the front is %d\n",peek()); 
                        break; 
                case 4: 
                        display(); 
                        break; 
                case 5: 
                        exit(1); 
                default: 
                        printf("\nWrong choice\n"); 
                }/*End of switch*/ 
        }/*End of while*/ 
 
        return 0; 
 
}
void insert(int item) 
{   
      if( isFull() ) 
        { 
                printf("\n Queue Overflow\n"); 
                return; 
        } 
        if( front == -1 ) 
                front=0; 
        rear=rear+1; 
        queue_arr[rear]=item ; 
} 
int del() 
{ 
        int item; 
 /*Check the Underflow Condition*/ 
        if( isEmpty() ) 
        { 
                printf("\n Queue Underflow\n");  
                exit(1); 
        } 
        item=queue_arr[front]; 
        front=front+1; 
        return item; 
}/*End of del()*/ 
 
int peek() 
{ 
   if( isEmpty() ) 
        { 
                printf("\n Queue Underflow\n"); 
                exit(1); 
        } 
        return queue_arr[front]; 
}/*End of peek()*/ 
 
int isEmpty() 
{ 
        if( front==-1 || front==rear+1 ) 
                return 1; 
        else 
                return 0; 
}/*End of isEmpty()*/ 
 
int isFull() 
{ 
        if( rear==MAX-1 ) 
                return 1; 
        else 
                return 0; 
}/*End of isFull()*/ 
 
/*Queue Display Function*/ 
void display() 
{ 
        int i; 
        if ( isEmpty() ) 
        { 
                printf("\n Queue is empty\n"); 
                return; 
        } 
        printf("\n Queue is :\n\n"); 
        for(i=front;i<=rear;i++) 
                printf("%d  ",queue_arr[i]); 
        printf("\n\n"); 
}/*End of display() */
